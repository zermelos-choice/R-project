?rnorm
knitr::opts_chunk$set(echo= FALSE)
install.packages("car")
knitr::opts_chunk$set(echo= FALSE)
library("car")
?Prestige
summary(Prestige)
?pnorm
pnorm(55, mean = 1/2, sd=1/5)
.102*sqrt(8)
.81*sqrt(8)
0.67*sqrt(28)
knitr::opts_chunk$set(echo= FALSE)
flips <- sample(c(0,1), 20, replace = TRUE, prob = c(0.5, 0.5))
flips
sum(flips)
flips20
flips20 <- sample(c(0,1), 20, replace = TRUE, prob = c(0.5, 0.5))
flips20
total.heads<-sum(flips20)
total.heads20<-sum(flips20)
total.heads20
flips20 <- sample(c(0,1), 20, replace = TRUE, prob = c(0.5, 0.5))
flips20
total.heads20<-sum(flips20)
total.heads20
13/20
?sapply
k<-list(1:5)
sapply(k, sample(c(0,1), k, replace = TRUE, prob =c(0.5, 0.5)))
for (k in 1:5){
v<-sample(c(0,1), k, replace = TRUE, prob =c(0.5, 0.5))
}
v
v
for (k in 1:5){
v<-sample(c(0,1), k, replace = TRUE, prob =c(0.5, 0.5))
print(k)
}
flipsk<-function(trials){
flips <- sample(c(0,1), trials , replace = TRUE, prob = c(0.5, 0.5))
}
flipsk(5)
flipsk(5)
print(flips(trials))
print(flipsk(trials))
flipsk<-function(trials){
flips <- sample(c(0,1), trials , replace = TRUE, prob = c(0.5, 0.5))
}
clear
flipsk<-function(NoTrials){
Noflips <- sample(c(0,1), NoTrials , replace = TRUE, prob = c(0.5, 0.5))
}
flipsk(4)
View(flipsk)
View(flipsk)
flipsk()
flipsk<-function(NoTrials){
Noflips <- sample(c(0,1), NoTrials , replace = TRUE, prob = c(0.5, 0.5))
Noflips
}
flipsk(3)
flipsk(1)
flipsk(2)
flipsk(3)
sapply(k, flipsk)
sapply(k, flipsk(k))
sapply(k, flipsk)
flipsk
k<-list(1:5)
sapply(k, flipsk)
sapply(k, flipsk)
k<-list(1:5)
sapply(k, flipsk)
sapply(k, flipsk(k))
sapply(k, flipsk
sapply(k, flipsk)
k<-list(1:5)
sapply(k, flipsk)
trials<-sapply(k, flipsk)
trials
trials<-sapply(k, flipsk)
trials
k<-list(1:5)
trials<-sapply(k, flipsk)
trials
flipsk<-function(NoTrials){
Noflips <- sample(c(0,1), 10^(NoTrials) , replace = TRUE, prob = c(0.5, 0.5))
Noflips
}
sapply(1:5,flipsk(x))
sapply(k=1:5,flipsk(k))
sapply(1:5,sample(c(0,1), 10^k, replace=TRUE, prob=c(0.5,0.5)))
sapply(1:5,sample(c(0,1), k, replace=TRUE, prob=c(0.5,0.5)))
sapply(1:3, function(x) x^2)
?sample
sapply(1:5,sample(c(0,1), 1:5, replace=TRUE, prob=c(0.5,0.5)))
sapply(x=1:5,sample(c(0,1), x, replace=TRUE, prob=c(0.5,0.5)))
sapply(x, sample(c(0,1), x, replace=TRUE, prob=c(0.5,0.5)))
x<-list(1:5)
sapply(x, sample(c(0,1), x, replace=TRUE, prob=c(0.5,0.5)))
sapply(x, sample(c(0,1), 10^x, replace=TRUE, prob=c(0.5,0.5)))
sapply(x, sample(c(0,1), 10, replace=TRUE, prob=c(0.5,0.5)))
?sapplyu
?sapply
sapply(x, sample(c(0,1), 10, replace=TRUE, prob=c(0.5,0.5)))
sapply(x, sample(c(0,1), x, replace=TRUE, prob=c(0.5,0.5)))
x<-c(10,100,1000,10000,100000)
sapply(x, sample(c(0,1), x, replace=TRUE, prob=c(0.5,0.5)))
x<-lapply(1:3, function(x) x^2)
x
x<-sapply(1:3, function(x) x^2)
x
x<-sapply(1:3, function(x) sample(c(0,1), x, replace = TRUE, prob = c(0.5, 0.5))
x
x<-sapply(1:3, function(x) sample(c(0,1), x, replace = TRUE, prob = c(0.5, 0.5))
v<-sapply(1:3, function(x) sample(c(0,1), x, replace = TRUE, prob = c(0.5, 0.5))
v
v
v<-sapply(1:3, function(x) sample(c(0,1), x, replace = TRUE, prob = c(0.5, 0.5))
v
v<-sapply(1:3, function(x) sample(c(0,1), x, replace = TRUE, prob = c(0.5, 0.5))
v
v<-sapply(1:3, function(x) sample(c(0,1), x, replace = TRUE, prob = c(0.5, 0.5))
sequence<-10^(1:5)
A<-10^(1:5)
v<-sapply(A, function(x) sample(c(0,1), x, replace = TRUE, prob = c(0.5, 0.5))
;
?function
;
knitr::opts_chunk$set(echo= FALSE)
A<-10^(1:5)
A
sample(A)
s<-sample(A)
s
s
s<-sample(c(0,1),A)
?sample
sapply(A, sample(c(0,1),A, replace=TRUE,prob = c(0.5,0.5)))
?quantile
sapply(A, sample)
sapply(A, sample(c(0,1)))
sapply(A, sample)
sapply(A, sample, c(0,1))
sapply(A, sample, (c(0,1), replace=TRUE, c(0.5,0.5)))
sapply(A, sample, (c(0,1) replace=TRUE, c(0.5,0.5)))
sapply(A, sample, (c(0,1) replace=TRUE c(0.5,0.5)))
sapply(A, sample, c(0,1))
?sapply
knitr::opts_chunk$set(echo= FALSE)
total.tosses<-function(Tosses){
sample(c(0,1), Tosses, replace = TRUE, prob = c(0.5, 0.5))
}
sapply(k,total.tosses)
sapply(k,total.tosses(10^k))
k<-list(1:5)
sapply(k,total.tosses(10^k))
sapply(k,total.tosses(10))
sapply(k,total.tosses)
sapply(k,total.tosses)
for (k in 1:5){}
sapply(10^k,total.tosses)
for (k in 1:5){}
result<-sapply(10^k,total.tosses)
?for (variable in vector) {
};
result
result1<-sapply(10,total.tosses)
result2<-sapply(10^2, total.tosses)
result1<-sapply(10,total.tosses)
result2<-sapply(10^2, total.tosses)
result3<-sapply(10^3, total.tosses)
result4<-sapply(10^4, total.tosses)
result5<-sapply(10^5, total.tosses)
sum(result1)
P10<-sum(result1)/10
P10<-sum(result1)/10
P100<-sum(result2)/10^2
P103<-sum(result2)/10^3
P104<-sum(result2)/10^4
P105<-sum(result2)/10^5
total.tosses
test<-sapply(1:5, total.tosses(10^k) 10^k)
test<-sapply(1:5, total.tosses(10^x))
test<-sapply(x=1:5, total.tosses(10^x))
test<-sapply(1:5, total.tosses(x))
test<-sapply(1:5, total.tosses
test<-sapply(1:5, total.tosses
test<-sapply(1:5, total.tosses)
sample(c(0,1), 10^Tosses, replace = TRUE, prob = c(0.5, 0.5))
total.tosses<-function(Tosses){
sample(c(0,1), 10^Tosses, replace = TRUE, prob = c(0.5, 0.5))
}
test<-sapply(1:5, total.tosses)
multisim<-sapply(1:5, total.tosses)
multisim
multisim<-sapply(1:5, total.tosses)
total.headsmulti<-sum(multisim)
?do.call
total.headsmulti<-do.call(sum,multisim)
View(result)
View(result)
test<-sapply(total.headsmulti,sum)
test<-lapply(total.headsmulti,sum)
test<-sapply(total.headsmulti,sum)
test<-sapply(total.headsmulti(1),sum)
test<-vapply(total.headsmulti(1),sum)
test<-vapply(total.headsmulti,sum)
?vapply
i39<-sapply(3:9,seq)
i39
sapply(i39,fivenum)
vapply(i39,fivenum, c(Min.=0, "1st Qu."=0, Median=0, "3rd Qu."=0, Max.=0))
test<-vapply(total.headsmulti,sum, c(Min. = 0, "1st Qu." = 0, Median = 0, "3rd Qu." = 0, Max. = 0))
test<-vapply(total.headsmulti, 1:5, sum,c(Min. = 0, "1st Qu." = 0, Median = 0, "3rd Qu." = 0, Max. = 0))
test<-apply(total.headsmulti, 1:5, sum,c(Min. = 0, "1st Qu." = 0, Median = 0, "3rd Qu." = 0, Max. = 0))
test<-apply(total.headsmulti, 1:5, sum)
?apply
total.headsmulti<-do.call(sum,multisim)
test<-vapply(multisim, 1:5, sum),c(Min. = 0, "1st Qu." = 0, Median = 0, "3rd Qu." = 0, Max. = 0))
test<-vapply(multisim, 1:5, sum,c(Min. = 0, "1st Qu." = 0, Median = 0, "3rd Qu." = 0, Max. = 0))
test<-vapply(multisim, sum,c(Min. = 0, "1st Qu." = 0, Median = 0, "3rd Qu." = 0, Max. = 0))
?vapply
test<-vapply(multisim, sum,c(0))
test
test<-vapply(multisim, sum)
test<-vapply(multisim, sum,c("Total number of heads"=0))
test
test<-vapply(multisim, sum, c(Total number of heads=0))
test<-vapply(multisim, sum, c("Total number of heads"=0))
test
test<-vapply(multisim, sum, c("Total number of heads",=0))
test<-vapply(multisim, sum, c("Total number of heads"=0,=0))
test<-vapply(multisim, sum, c("Total number of heads"=0))
test
multisim<-sapply(1:5, total.tosses)
total.headsmulti<-vapply(multisim, sum, c("Total number of heads"=0))
total.headsmulti
probabilities<-total.headsmulti/10
probabilities
probabilities<-total.headsmulti(1)/10
probabilities<-total.headsmulti[1]/10
probabilities
for (k in 1:5) {
probabilities<-total.headsmulti[k]/10^k
}
probabilities
probabilities<-total.headsmulti[L]/10^L
for (L in 1:5) {
probabilities<-total.headsmulti[L]/10^L
}
probabilities
probabilities=list()
probabilities=list()
for (L in 1:5) {
prob<-total.headsmulti[L]/10^L
probabilities[prob]
}
probabilities
probabilities=list()
for (L in 1:5) {
probabilities[total.headsmulti[L]/10^L]
}
probabilities
?list
for (L in 1:5) {
prob[L]<-total.headsmulti[L]/10^L
print(prob[L])
}
prob
t(prob)
for (L in 1:5) {
probabilities[L]<-total.headsmulti[L]/10^L
print(probabilities[L])
}
prob
probabilities
for (L in 1:5) {
probabilities[L]<-total.headsmulti[L]/10^L
print(probabilities[L])
}
probabilities
probabilities
prob[L]<-total.headsmulti[L]/10^L
print(prob[L])
prob
total.tosses<-function(Tosses){
sample(c(0,1), 10^Tosses, replace = TRUE, prob = c(0.5, 0.5))
}
multisim<-sapply(1:5, total.tosses)
total.headsmulti<-vapply(multisim, sum, c("Total number of heads"=0))
total.headsmulti
for (L in 1:5) {
prob[L]<-total.headsmulti[L]/10^L
print(prob[L])
}
prob
total.tosses<-function(Tosses){
sample(c(0,1), 10^Tosses, replace = TRUE, prob = c(0.5, 0.5))
}
multisim<-sapply(1:5, total.tosses)
total.headsmulti<-vapply(multisim, sum, c("Total number of heads"=0))
total.headsmulti
for (L in 1:5) {
prob[L]<-total.headsmulti[L]/10^L
print(prob[L])
}
prob
print(prob[L])
for (L in 1:5) {
prob[L]<-total.headsmulti[L]/10^L
print(prob[L])
}
prob["Toss" L,L]<-total.headsmulti[L]/10^L
prob[,L]<-total.headsmulti[L]/10^L
prob[1,L]<-total.headsmulti[L]/10^L
for (L in 1:5) {
prob[L]<-total.headsmulti[L]/10^L
print(prob[L])
}
prob
knitr::opts_chunk$set(echo= FALSE)
flips20 <- sample(c(0,1), 20, replace = TRUE, prob = c(0.5, 0.5))
flips20
total.heads20<-sum(flips20)
total.heads20
"P(Heads)"=total.head20/20
"P(Heads)"=total.heads20/20
"P(Heads)"=total.heads20/20
P(Heads)
"P(Heads)""
"P(Heads)"
"P(Heads)"
print("P(Heads)"=Pheads)
print("P(Heads)"=Pheads)
Pheads<-total.heads20/20
print("P(Heads)"=Pheads)
print(Pheads)
"P(Heads)"=print(Pheads)
Pheads<-total.heads20/20
"P(Heads)"=print(Pheads)
print("P(Heads)"=Pheads)
print("P(Heads)"Pheads)
cat("P(Heads)=", Pheads)
cat("P(Heads) =", Pheads)
total.tosses<-function(Tosses){
sample(c(0,1), 10^Tosses, replace = TRUE, prob = c(0.5, 0.5))
}
multisim<-sapply(1:5, total.tosses)
total.headsmulti<-vapply(multisim, sum, c("Total number of heads"=0))
total.headsmulti
for (L in 1:5) {
prob[L]<-total.headsmulti[L]/10^L
print(prob[L])
}
multisim<-sapply(1:5, total.tosses)
total.headsmulti<-vapply(multisim, sum, c("Total number of heads"=0))
total.headsmulti
for (L in 1:5) {
prob[L]<-total.headsmulti[L]/10^L
print(prob[L])
}
for (L in 1:5) {
prob[L]<-total.headsmulti[L]/10^L
print(prob[L])
}
prob
prob
prob
for (L in 1:5) {
prob[L]<-total.headsmulti[L]/10^L
print(prob[L])
}
prob=list()
for (L in 1:5) {
prob[L]<-total.headsmulti[L]/10^L
print(prob[L])
}
prob
prob=list()
for (L in 1:5) {
prob[L]<-total.headsmulti[L]/10^L
#print(prob[L])
}
prob
multisim<-sapply(1:5, total.tosses)
total.headsmulti<-vapply(multisim, sum, c("Total number of heads"=0))
total.headsmulti
multi.prob=list()
for (L in 1:5) {
multi.prob[L]<-total.headsmulti[L]/10^L
#print(prob[L])
}
multi.prob
true.prob=c(0.5,0.5,0.5,0.5,0.5)
true.prob=c(0.5,0.5,0.5,0.5,0.5)
abs(true.prob-multi.prob)
approx.prob<-unlist(multi.prob, use.names=FALSE)
abs(true.prob-approx.prob)
true.prob<-c(0.5,0.5,0.5,0.5,0.5)
approx.prob<-unlist(multi.prob, use.names=FALSE)
error<-abs(true.prob-approx.prob)
error
approx.prob
approx.prob<-unlist(multi.prob, use.names=FALSE)
approx.prob
true.prob<-c(0.5,0.5,0.5,0.5,0.5)
error<-abs(true.prob-approx.prob)
error
getwd
getwd()
setwd("Users/brad/Downloads/STA 32/R Project")
setwd("/Users/brad/Downloads/STA 32/R Project")
knitr::opts_chunk$set(echo= FALSE)
crime.data<-read.csv("crime.csv")
qplot(X, Y, crime.data)
plot(crime.data$rate,crime.data$dip,
main="Relationship Between rate and dip",
xlab="rate",
ylab="dip")
plot(crime.data$rate,crime.data$dip,main="Relationship Between rate and dip", xlab="rate", ylab="dip")
model<-lm(rate ~ dip, data=crime.data)
model
crime.model<-lm(rate ~ dip, data=crime.data)
crime.model
hist(crime.model$residuals)
qqnorm(crime.model$residuals)
qqline(crime.model$residuals)
qqnorm(crime.model$residuals)
knitr::opts_chunk$set(echo= FALSE)
student.sample40<-sample(c(0,1), 40, replace = TRUE, prob = c(0.05, 0.95))
student.sample40
fail<-(40-sum(student.sample40))
?print
?cat
cat("# of students that did not turn in their homework=", fail)
cat("# of students that did not turn in their homework =", fail)
student.sampleMIL<-sample(c(0,1), 10^6, replace = TRUE, prob = c(0.05, 0.95))
failMIL<-(10^6-sum(student.sampleMIL))
?hist
hist(failMIL)
hist(student.sampleMIL)
?hist
hist(student.sampleMIL,freq=F, plot=F)
hist(student.sampleMIL,freq=F)
mean40<-sum(student.sample40)/40
mean40
mean(student.sample40)
x<-mean(student.sample40)
x
mean40
sd40<-sd(student.sample40)
cat("The standard deviation is", sd40)
sd40<-sd(student.sample40)
cat("The sample mean is", mean40)
sd40<-sd(student.sample40)
cat("The standard deviation is", sd40)
